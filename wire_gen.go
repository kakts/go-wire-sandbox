// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/kakts/go-wire-sandbox/src/field"
	"github.com/kakts/go-wire-sandbox/src/foobar"
	"github.com/kakts/go-wire-sandbox/src/foobarbaz"
	"github.com/kakts/go-wire-sandbox/src/model"
	"github.com/kakts/go-wire-sandbox/src/value"
)

// Injectors from wire.go:

// Eventの生成
func InitializeEvent(phrase string) (model.Event, error) {
	message := model.NewMessage(phrase)
	modelGreeter := model.NewGreeter(message)
	event, err := model.NewEvent(modelGreeter)
	if err != nil {
		return model.Event{}, err
	}
	return event, nil
}

// Bazの生成
func InitializeBaz(ctx context.Context) (foobarbaz.Baz, error) {
	foo := foobarbaz.ProvideFoo()
	bar := foobarbaz.ProvideBar(foo)
	baz, err := foobarbaz.ProvideBaz(ctx, bar)
	if err != nil {
		return foobarbaz.Baz{}, err
	}
	return baz, nil
}

func InitializeBar() string {
	myFooer := model.ProvideMyFooer()
	string2 := model.ProvideBar(myFooer)
	return string2
}

func InitializeFooBar() foobar.FooBar {
	foo := foobar.ProvideFoo()
	bar := foobar.ProvideBar()
	fooBar := foobar.FooBar{
		MyFoo: foo,
		MyBar: bar,
	}
	return fooBar
}

func InitializeValueFoo() value.Foo {
	foo := _wireFooValue
	return foo
}

var (
	_wireFooValue = value.Foo{X: 42}
)

// Foo.SのインジェクションのプロバイダーにGetSを使う場合
func InitializeFieldFoo1() string {
	foo := field.ProvideFoo()
	string2 := field.GetS(foo)
	return string2
}

// Foo.SのインジェクションのプロバイダーにGetSを使わず、wire.FieldsOfを使う場合
func InitializeFieldFoo2() string {
	foo := field.ProvideFoo()
	string2 := foo.S
	return string2
}

func initApp() *app {
	mainTimer := _wireRealTimeValue
	mainGreeter := greeter{
		T: mainTimer,
	}
	mainApp := &app{
		g: mainGreeter,
	}
	return mainApp
}

var (
	_wireRealTimeValue = realTime{}
)

// initMockedAppFromArgs
// アプローチA用に、引数によって渡されたモック化された依存パッケージを利用するアプリを返します。
// 引数の型は、具体型でなくインタフェース(timer)ですが、実際の具体的なモック型を渡す必要があります。
func initMockedAppFromArgs(mt timer) *app {
	mainGreeter := greeter{
		T: mt,
	}
	mainApp := &app{
		g: mainGreeter,
	}
	return mainApp
}

// initMockedApp
// アプローチB用に、プロバイダーによって作成されたモックを利用したアプリを返します
func initMockedApp() *appWithMocks {
	mainMockTimer := newMockTimer()
	mainGreeter := greeter{
		T: mainMockTimer,
	}
	mainApp := app{
		g: mainGreeter,
	}
	mainAppWithMocks := &appWithMocks{
		app: mainApp,
		mt:  mainMockTimer,
	}
	return mainAppWithMocks
}

// wire.go:

// model.MyFooerの生成
// TODO
type test struct {
	f model.Fooer
}
